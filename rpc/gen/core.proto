syntax = "proto3";

package pb;

option go_package = "github.com/projecteru2/core/rpc/gen;pb";

service CoreRPC {
  rpc Info(Empty) returns (CoreInfo) {};
  rpc WatchServiceStatus(Empty) returns (stream ServiceStatus) {};

  rpc ListNetworks(ListNetworkOptions) returns (Networks) {};
  rpc ConnectNetwork(ConnectNetworkOptions) returns (Network) {};
  rpc DisconnectNetwork(DisconnectNetworkOptions) returns (Empty) {};

  rpc AddPod(AddPodOptions) returns (Pod) {};
  rpc RemovePod(RemovePodOptions) returns (Empty) {};
  rpc GetPod(GetPodOptions) returns (Pod) {};
  rpc ListPods(Empty) returns (Pods) {};

  rpc GetPodResource(GetPodOptions) returns (stream NodeResource) {};
  rpc GetNodeResource(GetNodeResourceOptions) returns (NodeResource) {};

  rpc AddNode(AddNodeOptions) returns (Node) {};
  rpc RemoveNode(RemoveNodeOptions) returns (Empty) {};
  rpc ListPodNodes(ListNodesOptions) returns (stream Node) {};
  rpc GetNode(GetNodeOptions) returns (Node) {};
  rpc GetNodeEngineInfo(GetNodeOptions) returns (Engine) {};
  rpc SetNode(SetNodeOptions) returns (Node) {};
  rpc SetNodeStatus(SetNodeStatusOptions) returns (Empty) {};
  rpc GetNodeStatus(GetNodeStatusOptions) returns (NodeStatusStreamMessage) {};
  rpc NodeStatusStream(Empty) returns (stream NodeStatusStreamMessage) {};

  rpc CalculateCapacity(DeployOptions) returns (CapacityMessage);

  rpc GetWorkload(WorkloadID) returns (Workload) {};
  rpc GetWorkloads(WorkloadIDs) returns (Workloads) {};
  rpc ListWorkloads(ListWorkloadsOptions) returns (stream Workload) {};
  rpc ListNodeWorkloads(GetNodeOptions) returns (Workloads) {};
  rpc GetWorkloadsStatus(WorkloadIDs) returns (WorkloadsStatus) {};
  rpc SetWorkloadsStatus(SetWorkloadsStatusOptions) returns (WorkloadsStatus) {};
  rpc WorkloadStatusStream(WorkloadStatusStreamOptions) returns (stream WorkloadStatusStreamMessage) {};

  rpc Copy(CopyOptions) returns (stream CopyMessage) {};
  rpc Send(SendOptions) returns (stream SendMessage) {};

  rpc BuildImage(BuildImageOptions) returns (stream BuildImageMessage) {};
  rpc CacheImage(CacheImageOptions) returns (stream CacheImageMessage) {};
  rpc RemoveImage(RemoveImageOptions) returns (stream RemoveImageMessage) {};
  rpc ListImage(ListImageOptions) returns (stream ListImageMessage) {};

  rpc CreateWorkload(DeployOptions) returns (stream CreateWorkloadMessage) {};
  rpc ReplaceWorkload(ReplaceOptions) returns (stream ReplaceWorkloadMessage) {};
  rpc RemoveWorkload(RemoveWorkloadOptions) returns (stream RemoveWorkloadMessage) {};
  rpc DissociateWorkload(DissociateWorkloadOptions) returns (stream DissociateWorkloadMessage) {};
  rpc ControlWorkload(ControlWorkloadOptions) returns (stream ControlWorkloadMessage) {};
  rpc ExecuteWorkload(stream ExecuteWorkloadOptions) returns (stream AttachWorkloadMessage) {};
  rpc ReallocResource(ReallocOptions) returns (ReallocResourceMessage) {};
  rpc LogStream(LogStreamOptions) returns (stream LogStreamMessage) {};
  rpc RunAndWait(stream RunAndWaitOptions) returns (stream AttachWorkloadMessage) {};
}

message Empty {}

message CoreInfo {
  string version = 1001;
  string revison = 1002;
  string build_at = 1003;
  string golang_version = 1004;
  string os_arch = 1005;
  string identifier = 1006;
}

message ServiceStatus {
  repeated string addresses = 1001;
  int64 interval_in_second = 1002;
}

message Engine{
  string type = 1001;
}

message ListWorkloadsOptions {
  string appname = 1001;
  string entrypoint = 1002;
  string nodename = 1003;
  map<string, string> labels = 1004;
  int64 limit = 1005;
}

// 对的, protobuf 就是这样...
message Pod {
  string name = 1001;
  string desc = 1002;
}

message Pods {
  repeated Pod pods = 1001;
}

message StringSlice {
  repeated string slice = 1001;
}

message RawParam {
  oneof value {
    string str = 1001;
    StringSlice string_slice = 1002;
  }
}

message NodeResource {
  string name = 1001;
  repeated string diffs = 1002;
  string resource_capacity = 1003;
  string resource_usage = 1004;
}

message ListNetworkOptions {
  string podname = 1001;
  string driver = 1002;
}

message ConnectNetworkOptions{
  string network = 1001;
  string target = 1002;
  string ipv4 = 1003;
  string ipv6 = 1004;
}

message DisconnectNetworkOptions{
  string network = 1001;
  string target = 1002;
  bool force = 1003;
}

message Network {
  string name = 1001;
  repeated string subnets = 1002;
}

message Networks {
  repeated Network networks = 1001;
}

message Node {
  string name = 1001;
  string endpoint = 1002;
  string podname = 1003;
  bool available = 1004;
  bool bypass = 1005;
  map<string, string> labels = 1006;
  string info = 1007;
  string resource_capacity = 1008;
  string resource_usage = 1009;
}

message AddPodOptions {
  string name = 1001;
  string desc = 1002;
}

message RemovePodOptions {
  string name = 1001;
}

message GetPodOptions {
  string name = 1001;
}

message AddNodeOptions {
  string nodename = 1001;
  string endpoint = 1002;
  string podname = 1003;
  string ca = 1004;
  string cert = 1005;
  string key = 1006;
  map<string, string> labels = 1007;
  map<string, RawParam> resource_opts = 1008;
}

message RemoveNodeOptions {
  string nodename = 1001;
}

message GetNodeOptions {
  string nodename = 1001;
  map<string, string> labels = 1002;
}

message GetNodeResourceOptions {
  GetNodeOptions opts = 1001;
  bool fix = 1002;
}

message ListNodesOptions {
  string podname = 1001;
  bool all = 1002;
  map<string, string> labels = 1003;
  int32 timeout_in_second = 1004;
  bool skip_info = 1005;
}

message SetNodeOptions {
  string nodename = 1001;
  string endpoint = 1002;
  string ca = 1003;
  string cert = 1004;
  string key = 1005;
  map<string, string> labels = 1006;
  map<string, RawParam> resource_opts = 1007;
  bool delta = 1008;
  bool workloads_down = 1009;
  TriOpt bypass = 1010;
}

message SetNodeStatusOptions {
  string nodename = 1001;
  int64 ttl = 1002;
}

message GetNodeStatusOptions {
  string nodename = 1001;
}

message NodeStatusStreamMessage {
  string nodename = 1001;
  string podname = 1002;
  bool alive = 1003;
  string error = 1004;
}

message NodeFilter {
  repeated string includes = 1001;
  repeated string excludes = 1002;
  map<string, string> labels = 1003;
  bool all = 1004;
}

message Workload {
  string id = 1;
  string podname = 2;
  string nodename = 3;
  string name = 4;
  bool privileged = 5;
  map<string, string> labels = 6;
  map<string, string> publish = 7;
  string image = 8;
  WorkloadStatus status = 9;
//  Resource resource = 10;
  int64 create_time = 11;
  repeated string env = 12;
  string resource_args = 13;
}

message WorkloadStatus {
  string id = 1;
  bool running = 2;
  bool healthy = 3;
  map<string, string> networks = 4;
  bytes extension = 5;
  int64 ttl = 6;
  // extra fields used to set workload status
  string appname = 7;
  string nodename = 8;
  string entrypoint = 9;
}

message WorkloadsStatus {
  repeated WorkloadStatus status = 1;
}

message SetWorkloadsStatusOptions {
  repeated WorkloadStatus status = 1;
}

message WorkloadStatusStreamOptions {
  string appname = 1;
  string entrypoint = 2;
  string nodename = 3;
  map<string, string> labels = 4;
}

message WorkloadStatusStreamMessage {
  string id = 1;
  Workload workload = 2;
  WorkloadStatus status = 3;
  string error = 4;
  bool delete = 5;
}

message Workloads {
  repeated Workload workloads = 1;
}

message WorkloadID {
  string id = 1;
}

message WorkloadIDs {
  repeated string ids = 1;
}

message RemoveWorkloadOptions {
  repeated string ids = 1;
  bool force = 2;
}

message DissociateWorkloadOptions {
  repeated string ids = 1;
}

enum TriOpt {
  KEEP = 0;
  TRUE = 1;
  FALSE = 2;
}

message ReallocOptions {
  string id = 1001;
  map<string, RawParam> resource_opts = 1002;
}

message Build {
  string base = 1;
  string repo = 2;
  string version = 3;
  string dir = 4;
  bool submodule = 5;
  repeated string commands = 6;
  map<string, string> envs = 7;
  map<string, string> args = 8;
  map<string, string> labels = 9;
  map<string, string> artifacts = 10;
  map<string, string> cache = 11;
  string stop_signal = 12;
  bool security = 13;
}

message Builds {
  repeated string stages = 1;
  map<string, Build> builds = 2;
}

message BuildImageOptions {
  string name = 1;
  string user = 2;
  int32 uid = 3;
  repeated string tags = 4;
  Builds builds = 5;
  bytes tar = 6;
  enum BuildMethod {
    SCM = 0;
    RAW = 1;
    EXIST = 2;
  }
  BuildMethod build_method = 7;
  string exist_id = 8;
}

message HookOptions {
  repeated string after_start = 1;
  repeated string before_stop = 2;
  bool force = 3;
}

message HealthCheckOptions {
  repeated string tcp_ports = 1;
  string http_port = 2;
  string url = 3;
  int32 code = 4;
}

message LogOptions {
  string type = 1;
  map<string, string> config = 2;
}

message EntrypointOptions {
  string name = 1;
  // `command` field is to be deprecated in favor of `commands` field
  string command = 2;
  bool privileged = 3;
  string dir = 4;
  LogOptions log = 5;
  repeated string publish = 6;
  HealthCheckOptions healthcheck = 7;
  HookOptions hook = 8;
  string restart = 9;
  map<string, string> sysctls = 10;
  // `commands` is the new-style and preferable fields to specify process to run
  // to specify shell-like command such as `true && echo a > /dev/null`
  // please state the shell explicitly: ["sh", "-c", "true && echo a > /dev/null"]
  repeated string commands = 11;
}

message Volume {
  map<string, int64> volume = 1;
}

message DeployOptions {
  enum Strategy {
    AUTO = 0;
    FILL = 1;
    EACH = 2;
    GLOBAL = 3;
    DUMMY = 99;
  }
  string name = 1;
  EntrypointOptions entrypoint = 2;
  string podname = 3;
  repeated string nodenames = 4;
  string image = 5;
  string extra_args = 6;
  int32 count = 7;
  repeated string env = 8;
  repeated string dns = 9;
  repeated string extra_hosts = 10;
  map<string, string> networks = 11;
  string user = 13;
  bool debug = 14;
  bool open_stdin = 15;
  map<string, string> labels = 16;
  map<string, string> nodelabels = 17;
  Strategy deploy_strategy = 18;
  map<string, bytes> data = 19;
  int32 nodes_limit = 20;
  bool ignore_hook = 21;
  repeated string after_create = 22;
  bytes raw_args = 23;
//  ResourceOptions old_resource_opts = 24;
  NodeFilter node_filter = 25;
  // should be part of field no.19
  map<string, FileMode> modes = 26;
  map<string, FileOwner> owners = 27;
  map<string, RawParam> resource_opts = 28;
}

message ReplaceOptions {
  DeployOptions deployOpt = 1;
  bool networkinherit = 2;
  map<string, string> filter_labels = 3;
  map<string, string> copy = 4;
  repeated string ids = 5;
}

message CacheImageOptions {
  string podname = 1;
  repeated string nodenames = 2;
  repeated string images = 3;
  int32 step = 4;
}

message RemoveImageOptions {
  string podname = 1;
  repeated string nodenames = 2;
  repeated string images = 3;
  int32 step = 4;
  bool prune = 5;
}

message ListImageOptions {
  string podname = 1;
  repeated string nodenames = 2;
  string filter = 3;
}

message CopyPaths {
  repeated string paths = 1;
}

message CopyOptions {
  map<string, CopyPaths> targets = 1;
}

message FileOwner {
  int32 uid = 1;
  int32 gid = 2;
}

message FileMode {
  int64 mode = 1;
}

message SendOptions {
  repeated string ids = 1;
  map<string, bytes> data = 2;
  map<string, FileMode> modes = 3;
  map<string, FileOwner> owners = 4;
}

message ErrorDetail {
  int64 code = 1;
  string message = 2;
}

message BuildImageMessage {
  string id = 1;
  string status = 2;
  string progress = 3;
  string error = 4;
  string stream = 5;
  ErrorDetail error_detail = 6;
}

message CreateWorkloadMessage {
  string podname = 1;
  string nodename = 2;
  string id = 3;
  string name = 4;
  string error = 5;
  bool success = 6;
  map<string, string> publish = 7;
  bytes hook = 8;
//  Resource resource = 9;
  string resource_args = 10;
}

message ReplaceWorkloadMessage {
  CreateWorkloadMessage create = 1;
  RemoveWorkloadMessage remove = 2;
  string error = 3;
}

message CacheImageMessage {
  string image = 1;
  bool success = 2;
  string nodename = 3;
  string message = 4;
}

message RemoveImageMessage {
  string image = 1;
  bool success = 2;
  repeated string messages = 3;
}

message ImageItem{
  string id = 1;
  repeated string tags = 2;
}

message ListImageMessage{
  repeated ImageItem images = 1;
  string nodename = 2;
  string err = 3;
}

message RemoveWorkloadMessage {
  string id = 1;
  bool success = 2;
  string hook = 3;
}

message DissociateWorkloadMessage {
  string id = 1;
  string error = 2;
}

message ReallocResourceMessage {
  string error = 1;
}

message CopyMessage {
  string id = 1;
  string name = 2;
  string path = 3;
  string error = 4;
  bytes data = 5;
}

message SendMessage {
  string id = 1;
  string path = 2;
  string error = 3;
}

enum StdStreamType {
  STDOUT = 0;
  STDERR = 1;
  TYPEWORKLOADID = 6;
  ERUERROR = -1;
}

message AttachWorkloadMessage {
  string workload_id = 1;
  bytes data = 2;
  StdStreamType std_stream_type = 3;
}

message RunAndWaitOptions{
  DeployOptions deploy_options = 1;
  bytes cmd = 2;
  bool async = 3;
  int32 async_timeout = 4;
}

message ControlWorkloadOptions {
  repeated string ids = 1;
  string type = 2;
  bool force = 3;
}

message ControlWorkloadMessage {
  string id = 1;
  string error = 2;
  bytes hook = 3;
}

message LogStreamOptions {
  string id = 1;
  string tail = 2;
  string since = 3;
  string until = 4;
  bool follow = 5;
}

message LogStreamMessage {
  string id = 1;
  string error = 2;
  bytes data = 3;
  StdStreamType std_stream_type = 4;
}

message ExecuteWorkloadOptions {
  string workload_id = 1;
  repeated string commands = 2;
  repeated string envs = 3;
  string workdir = 4;
  bool open_stdin = 5;
  bytes repl_cmd = 6;
}

message CapacityMessage {
  int64 total = 1;
  map<string, int64> node_capacities = 2;
}
